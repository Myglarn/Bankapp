@page "/NewTransaction"
@inject IAccountservice Accountservice;
<h3>New Transaction</h3>

@if (_accounts.Count < 2)
{
	<p>Skapa minst 2 konton för att göra en transaktion</p>
}
else
{
	<EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
			<DataAnnotationsValidator/>
			<ValidationSummary/>
			<div class="form-row">
				<label>Transaction type</label>
				<InputSelect @bind-Value="_model.TransactionType" class="form-row">
					@foreach (var type in Enum.GetValues(typeof(TransactionType))
					.Cast<TransactionType>()
					.Where(t => t != TransactionType.TransferIn && t != TransactionType.TransferOut))
					{
					<option value="@type">@type</option>
					}
				</InputSelect>
			</div>
		@if (_model.TransactionType == TransactionType.Transfer)
		{
				<div class="form-row">
					<label>From account</label>
					<InputSelect TValue="Guid"
							 @bind-Value="_model.FromAccountId"
							 class="form-select"
							 @onchange="HandleFormChanged">
						<option value="Guid.Empty">Choose account..</option>
						@foreach (var account in _accounts)
						{
						<option value="@account.Id">@account.Name - Balance: @account.Balance</option>
						}
					</InputSelect>
				</div>
				<div class="form-row">
					<label>To Account</label>
					<InputSelect TValue="Guid"
							 @bind-Value="_model.ToAccountId"
							 class="form-select"
							 disabled="@(_model.FromAccountId == Guid.Empty)">
						<option value="@Guid.Empty">Choose account</option>
						@foreach (var account in _toAccounts)
						{
							<option value="@account.Id">@account.Name - Balance: @account.Balance</option>
						}
					</InputSelect>
				</div>				
		}
		else
		{
			<div class="form-row">
				<label>Account</label>
				<InputSelect TValue="Guid"
							 @bind-Value="_model.FromAccountId"
							 class="form-select">
					<option value="@Guid.Empty">-- Select an account --</option>
					@foreach (var account in _accounts)
					{
						<option value="@account.Id">@account.Name: @account.Balance @account.Currency</option>
					}
				</InputSelect>
			</div>			
		}
		<div class="form-row">
			<label>Currency</label>
			<InputSelect TValue="CurrencyType"
						 @bind-Value="_model.Currency"
						 class="form-select">
				<option value="Currency.Empty">Choose Currency</option>
				<option value="@CurrencyType.SEK">SEK</option>
				<option value="@CurrencyType.EUR">EUR</option>
				<option value="@CurrencyType.DOLLAR">DOLLAR</option>
			</InputSelect>
		</div>

		<div class="form-row">
			<label>Amount</label>
			<InputNumber TValue="decimal" @bind-Value="_model.Amount" class="form-control"></InputNumber>
		</div>

		@if (_model.TransactionType == TransactionType.Transfer)
		{
			<button type="submit" class="btn btn-submit">Transfer</button>
		}
		else if (_model.TransactionType == TransactionType.Deposit)
		{
			<button type="submit" class="btn btn-submit">Deposit</button>
		}
		else
		{
			<button type="submit" class="btn btn-submit">Withdraw</button>
		}
		

		
	</EditForm>

	<h4>Account</h4>
	<ul>
		@foreach (var account in _accounts)
		{
			<li>@account.Name - Balance: @account.Balance</li>
		}
	</ul>
}


@code {
	private readonly TransferFormModel _model = new();
	private List<Bankaccount> _accounts = new();
	private List<Bankaccount> _toAccounts = new();

	private class TransferFormModel
	{
		public TransactionType TransactionType { get; set; }
		public Guid FromAccountId { get; set; }
		public Guid ToAccountId { get; set; }
		public decimal Amount { get; set; }
		public CurrencyType Currency { get; set; }
	}
	protected override async Task OnInitializedAsync()
	{
		_accounts = await Accountservice.GetAccounts();

		_toAccounts = _accounts;
	}

	private async Task OnSubmitAsync()
	{	

		try
		{
			switch (_model.TransactionType)
			{
				case TransactionType.Transfer:
					if (_model.FromAccountId == Guid.Empty || _model.ToAccountId == Guid.Empty)
					{
						StateHasChanged();
						return;
					}
					if (_model.FromAccountId == _model.ToAccountId)
					{
						StateHasChanged();
						return;
					}
					Accountservice.Transfer(_model.FromAccountId, _model.ToAccountId, _model.Amount);
					break;

				case TransactionType.Deposit:
					Accountservice.Deposit(_model.FromAccountId, _model.Amount);
					break;

				case TransactionType.Withdraw:
					Accountservice.Withdraw(_model.FromAccountId, _model.Amount);
					break;

				default:
					break;
			}			
			//uppdatera vår lista
			_accounts = await Accountservice.GetAccounts();

			//Visa nån bekräftelse
			var from = _accounts.First(x => x.Id == _model.FromAccountId);
			var to = _accounts.First(x => x.Id == _model.ToAccountId);

			_model.Amount = 0;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
		return;
	}

	private void HandleFormChanged(ChangeEventArgs eventArgs)
	{
		if (Guid.TryParse(eventArgs.Value?.ToString(), out var id))
		{
			OnFormChanged(id);
		}
	}

	private void OnFormChanged(Guid fromId)
	{
		_model.FromAccountId = fromId;
		var from = _accounts.FirstOrDefault(x => x.Id == fromId);

		if (from != null)
		{
			_toAccounts = _accounts.Where(account => account.Id != fromId).ToList();
		}
		else
		{
			_accounts = _accounts.ToList();
		}

		_model.ToAccountId = Guid.Empty;
	}
}