@page "/Accounts"
@inject IAccountservice Accountservice;


<h3>Accounts</h3>


@if (_accounts.Count == 0)
{
	<p>There are no accounts registered, please create your first account at the "Create Account"-page</p>
}
else
{
	<table class="accounts-table">
		<thead>
			<tr>
				<th>Account name</th>
				<th>Account Type</th>
				<th>Balance</th>
				<th>Currency</th>
				<th>Interest rate</th>
				<th>Accumulated interest</th>
				<th>Last updated</th>
				<th></th>
			</tr>
		</thead>
			<tbody>
				@foreach (var acc in _accounts)
				{
				<tr>
					<td>@acc.Name</td>
					<td>@acc.AccountType</td>
					<td>@acc.Balance</td>
					<td>@acc.Currency</td>
					<td>
						@if(acc.AccountType == AccountType.Savings)
						{
							@(Bankaccount.InterestRate * 100)
						}
					</td>
					<td>
						@acc.ApplyInterest().ToString("C")
					</td>
					<td>@acc.LastUpdated.ToLocalTime()</td>
					<td>
						<button class="remove-btn" @onclick="() => RemoveAccount(acc)">Remove</button>
					</td>
				</tr>
				}
			</tbody>
	</table>
	
}
@code {


	private List<Bankaccount> _accounts = new();
	protected override async Task OnInitializedAsync()
	{
		_accounts = await Accountservice.GetAccounts();
	}

	private async Task GetAccountAsync()
	{
		try
		{			
			_accounts = await Accountservice.GetAccounts();			
		}
		catch (Exception exception)
		{
			Console.WriteLine("You are missing an input");
			throw;
		}

	}
	private async Task RemoveAccount(IBankaccount account)
	{
		try
		{
			await Accountservice.DeleteAccount(account);
			_accounts = await Accountservice.GetAccounts();
		}
		catch (Exception ex)
		{

			Console.WriteLine(ex);
		}
	}

}
